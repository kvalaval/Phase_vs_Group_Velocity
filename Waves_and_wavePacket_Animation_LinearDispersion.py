# -*- coding: utf-8 -*-
"""
Created on Wed Mar 10 00:25:30 2021

@author: vasan
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation


knum=11 #number of k values to used to form wave packet
waveL=1 #Wavelength of a wave that will be part of a wave packet alongside its k-neighbors. We will call this the median wave.
k=2*np.pi/waveL #k-vector of the median wave
dk=0.33*k #uncertainty in k. Wave packet will be generated by summing over k values in range k-0.5dk to k+0.5dk
karray=np.linspace(k-dk/2,k+dk/2,knum) #array of k values for waves that will be summed to form the wave packet

omega=karray #DISPERSION RELATION #Here,linear dispersion

ck=omega/karray #phase velocity of all the waves that will be summed to form the wave packet
#Choosing all waves to have same velovity, we set the dispersion relationship to be linear: w=c(k)*k with c(k)=1, a constant for all k.

ind=np.where(karray==k) #index of the median wave in the karray
freq= omega[ind[0][0]]/2/np.pi #frequency of the median wave

x=np.linspace(-10,10,1001) #Generating discreete x-points with a pitch of 0.01
times=np.linspace(0,4/freq,401) #plotting for a period of 4 cycles of the median wave
yData=np.zeros((len(times),knum+1,1001)) # Clearly, the three axes of this data array are (time, k, Y).
#each row in y will have y-data for one wavelength (or k). 
#The last row will have the y-data for the wavepacket.
dData=np.zeros((len(times),knum)) #x-location of the phase 0 peak as a function of time for each k wave

for ti in range(len(times)):
    for ki in range(len(karray)):
        t,kw,cw=times[ti],karray[ki],ck[ki]
        yData[ti,ki,:]=np.cos(kw*x-cw*kw*t)
        dData[ti,ki]=cw*t
yData[:,-1,:]=yData.sum(axis=1)

#creating a figure object and knum+1 axes objects. The last one will be the wave packet.
fig,ax=plt.subplots(knum+1,1,sharex=True,figsize=(16,12))
fig.suptitle('t=0')
lines=[]
dots=[]
for a in range(len(karray)):
    if karray[a]==k:
        line,dot,= ax[a].plot(x,yData[0,a,:],'#fc4f30',dData[0,a],1,'ko')
        
    else:
        line,dot,=ax[a].plot(x,yData[0,a,:],'#30a2da',dData[0,a],1,'ko')
    line.set_label('k = '+str(round(karray[a]/np.pi,3))+r'$\pi$')
    lines.append(line)
    dots.append(dot)
    ax[a].legend(loc='upper right')

wpln,=ax[knum].plot(x,yData[0,-1,:],label=r'$\sum_{k=1.67\pi}^{2.33\pi}$', color='r',linewidth=3)
lines.append(wpln)

ax[knum].legend(loc='upper right')
ax[knum].set_xlabel('X',fontsize=18)

def update(ti):
    fig.suptitle('t = '+str(round(times[ti],1))+'s')     
    for a in range(len(karray)):
        lines[a].set_data(x,yData[ti,a,:])
        dots[a].set_data(dData[ti,a],1)
    lines[knum].set_data(x,yData[ti,-1,:])
    
ani=FuncAnimation(fig,update,frames=range(len(times)),interval=0,blit=False,repeat=False)
ani.save('wavesANDwavepacketAnimation_Lin_disp.mp4', fps=1/times[1], dpi=120) #Frame per second controls speed, dpi controls the quality 

#plt.show()
    
    